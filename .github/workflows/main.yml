# .github/workflows/main.yml
name: Money-tracker CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master & develop branches
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
      - develop

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Docker build
        uses: ./.github/actions/setup-docker
        env:
          DOCKER_HOST_IP: "127.0.0.1"

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v2
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('composer.lock') }}

      - name: Composer setup
        uses: ./.github/actions/setup-composer
        if: steps.composer-cache.outputs.cache-hit != 'true'
        with:
          github_token: ${{ secrets.COMPOSER_GITHUB_ACTIONS }}

      - name: Cache npm/Yarn packages
        id: yarn-cache
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}

      - name: Yarn setup
        uses: ./.github/actions/setup-yarn
        if: steps.yarn-cache.outputs.cache-hit != 'true'

# TODO: get this working at some point in the future
#      - name: Cache vue
#        id: vue-cache
#        uses: actions/cache@v2
#        with:
#          path: |
#            public/vue
#            mix-manifest.json
#          key: ${{ runner.os }}-vue- # TODO: TBD

      - name: Build Vue
        uses: ./.github/actions/build-vue
#        if: steps.vue-cache.outputs.cache-hit != 'true' # TODO: get this working in the future

      - name: App Setup
        uses: ./.github/actions/app-init

  tests-unit:
    runs-on: ubuntu-latest
    needs: build  # make sure the build step is completed first
    steps:
      - name: unit tests - PUT API endpoints
        run: docker container exec -t app.money-tracker vendor/bin/phpunit --testsuite api-put

      - name: unit tests - GET API endpoints
        run: docker container exec -t app.money-tracker vendor/bin/phpunit --testsuite api-get

      - name: unit tests - POST API endpoints
        run: docker container exec -t app.money-tracker vendor/bin/phpunit --testsuite api-post

      - name: unit tests - DELETE API endpoints
        run: docker container exec -t app.money-tracker vendor/bin/phpunit --testsuite api-delete

      - name: unit tests - console
        run: |
          .docker/cmd/artisan.sh config:clear # artisan app:version testing doesn't work well when configs have been cached
          docker container exec -t --user www-data app.money-tracker cp .env.docker .env.testing  # because we're not caching, we need to create a new .env file
          docker container exec -t app.money-tracker vendor/bin/phpunit --testsuite console

      - name: unit tests - web
        run: docker container exec -t app.money-tracker vendor/bin/phpunit --testsuite web

      - name: unit tests - unit (generic)
        run: docker container exec -t app.money-tracker vendor/bin/phpunit --testsuite unit

  tests-e2e:
    runs-on: ubuntu-latest
    needs: build  # make sure the build step is completed first
    env:
      DUSK_SCREENSHOT_DIR: 'tests/Browser/screenshots/'
      DUSK_DB_DUMP_DIR: 'tests/Browser/db-dump/'
    steps:
      - name: App Setup
        uses: ./.github/actions/app-init.yml

      - name: e2e tests - demo
        run: .docker/cmd/artisan.sh dusk --group demo --stop-on-failure

      - name: e2e tests - notifications
        run: .docker/cmd/artisan.sh dusk --group notifications-1 --stop-on-failure
      - name: e2e tests - navigation
        run: |
          .docker/cmd/artisan.sh dusk --group navigation-1 --stop-on-failure
          .docker/cmd/artisan.sh dusk --group navigation-2 --stop-on-failure
          .docker/cmd/artisan.sh dusk --group navigation-3 --stop-on-failure
          .docker/cmd/artisan.sh dusk --group navigation-4 --stop-on-failure

      - name: e2e tests - entry-modal
        run: |
          .docker/cmd/artisan.sh dusk --group entry-modal-1 --stop-on-failure
          .docker/cmd/artisan.sh dusk --group entry-modal-2 --stop-on-failure

      - name: e2e tests - transfer-modal
        run: |
          .docker/cmd/artisan.sh dusk --group transfer-modal-1 --stop-on-failure
          .docker/cmd/artisan.sh dusk --group transfer-modal-2 --stop-on-failure

      - name: e2e tests - stats
        run: |
          .docker/cmd/artisan.sh dusk --group stats-summary --stop-on-failure
          .docker/cmd/artisan.sh dusk --group stats-trending --stop-on-failure
          .docker/cmd/artisan.sh dusk --group stats-distribution-1 --stop-on-failure
          .docker/cmd/artisan.sh dusk --group stats-distribution-2 --stop-on-failure
          .docker/cmd/artisan.sh dusk --group stats-tags-1 --stop-on-failure
          .docker/cmd/artisan.sh dusk --group stats-tags-2 --stop-on-failure

  notification:
    runs-on: ubuntu-latest
    needs:  # make sure the notification is sent AFTER the jobs you want included have completed
      - build
      - tests-unit
      - tests-e2e
    if: ${{ always() }} # You always want to be notified: success, failure, or cancelled
    steps:
      - name: discord
        uses: nobrayner/discord-webhook@v1
        with:
          github-token: ${{ secrets.DISCORD_GITHUB_TOKEN }}
          discord-webhook: ${{ secrets.DISCORD_WEBHOOK }}
