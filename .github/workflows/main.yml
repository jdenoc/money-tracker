# .github/workflows/main.yml
name: Money-tracker CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master & develop branches
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
      - develop

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  DOCKER_HOST_IP: "127.0.0.1"
  PROJECT_NAME: "moneytracker"

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache Docker images
        id: docker-image-cache
        uses: actions/cache@v2
        with:
          path: .docker/images
          key: cache-docker-${{ hashFiles('.docker/*.dockerfile') }}-${{ hashFiles('.docker/docker-compose.yml') }}

      - name: Docker build
        uses: ./.github/actions/setup-docker
        if: steps.docker-cache.outputs.cache-hit != 'true'

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v2
        with:
          path: vendor
          key: cache-composer-${{ hashFiles('composer.lock') }}

      - name: Composer setup
        uses: ./.github/actions/setup-composer
        if: steps.composer-cache.outputs.cache-hit != 'true'
        with:
          github-token: ${{ github.token }}

      - name: Cache npm/Yarn packages
        id: yarn-cache
        uses: actions/cache@v2
        with:
          path: node_modules
          key: cache-yarn-${{ hashFiles('yarn.lock') }}

      - name: Yarn setup
        uses: ./.github/actions/setup-yarn
        if: steps.yarn-cache.outputs.cache-hit != 'true'

      - name: Cache vue
        id: vue-cache
        uses: actions/cache@v2
        with:
          path: |
            public/vue
            public/mix-manifest.json
          key: ${{ runner.os }}-vue-${{ hashFiles('resources/js/*') }}-${{ hashFiles('resources/sass/*') }}

      - name: Build Vue
        uses: ./.github/actions/build-vue
        if: steps.vue-cache.outputs.cache-hit != 'true'

  tests-unit:
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # retrieve cache
      - name: Cache Docker images
        id: docker-image-cache
        uses: actions/cache@v2
        with:
          path: .docker/images
          key: cache-docker-${{ hashFiles('.docker/*.dockerfile') }}-${{ hashFiles('.docker/docker-compose.yml') }}

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v2
        with:
          path: vendor
          key: cache-composer-${{ hashFiles('composer.lock') }}

      - name: Cache npm/Yarn packages
        id: yarn-cache
        uses: actions/cache@v2
        with:
          path: node_modules
          key: cache-yarn-${{ hashFiles('yarn.lock') }}

      # NOTE: vue cache not needed for unit tests

      # init application for testing
      - name: App Setup
        uses: ./.github/actions/app-init

      # unit tests
      - name: unit tests - PUT API endpoints
        run: docker container exec -t app.money-tracker vendor/bin/phpunit --testsuite api-put
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.sha }}-unit-put
          path: storage/logs/*.log
          retention-days: 30

      - name: unit tests - GET API endpoints
        run: docker container exec -t app.money-tracker vendor/bin/phpunit --testsuite api-get
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.sha }}-unit-get
          path: storage/logs/*.log
          retention-days: 30

      - name: unit tests - POST API endpoints
        run: docker container exec -t app.money-tracker vendor/bin/phpunit --testsuite api-post
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.sha }}-unit-post
          path: storage/logs/*.log
          retention-days: 30

      - name: unit tests - DELETE API endpoints
        run: docker container exec -t app.money-tracker vendor/bin/phpunit --testsuite api-delete
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.sha }}-unit-delete
          path: storage/logs/*.log
          retention-days: 30

      - name: unit tests - console
        # artisan app:version testing doesn't work well when configs have been cached
        # because we're not caching, we need to create a new .env file
        run: |
          .docker/cmd/artisan.sh config:clear
          docker container exec -t --user www-data app.money-tracker cp .env.docker .env.testing
          docker container exec -t app.money-tracker vendor/bin/phpunit --testsuite console
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.sha }}-unit-console
          path: storage/logs/*.log
          retention-days: 30

      - name: unit tests - web
        run: docker container exec -t app.money-tracker vendor/bin/phpunit --testsuite web
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.sha }}-unit-web
          path: storage/logs/*.log
          retention-days: 30

      - name: unit tests - unit (generic)
        run: docker container exec -t app.money-tracker vendor/bin/phpunit --testsuite unit
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.sha }}-unit-generic
          path: storage/logs/*.log
          retention-days: 30

  tests-e2e:
    needs:
      - build
    runs-on: ubuntu-latest
    env:
      DUSK_SCREENSHOT_DIR: 'tests/Browser/screenshots/'
      DUSK_DB_DUMP_DIR: 'tests/Browser/db-dump/'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: debug env variables as paths
        run: |
          echo ${{DUSK_SCREENSHOT_DIR}}
          echo ${{DUSK_SCREENSHOT_DIR}}*
          if [ -d ${{DUSK_SCREENSHOT_DIR}} ]; then echo "DIR EXISTS \$\{\{DUSK_SCREENSHOT_DIR\}\}"; fi
          echo jobs.tests-e2e.env.DUSK_SCREENSHOT_DIR
          if [ -d jobs.tests-e2e.env.DUSK_SCREENSHOT_DIR ]; then echo "DIR EXISTS jobs.tests-e2e.env.DUSK_SCREENSHOT_DIR"; fi
          echo ${{ jobs.tests-e2e.env.DUSK_SCREENSHOT_DIR }}
          if [ -d ${{ jobs.tests-e2e.env.DUSK_SCREENSHOT_DIR }} ]; then echo "DIR EXISTS \$\{\{ jobs.tests-e2e.env.DUSK_SCREENSHOT_DIR \}\}"; fi
          echo ${{DUSK_DB_DUMP_DIR}}
          echo ${{DUSK_DB_DUMP_DIR}}*
          if [ -d ${{DUSK_DB_DUMP_DIR}} ]; then echo "DIR EXISTS \$\{\{DUSK_DB_DUMP_DIR\}\}"; fi
          echo jobs.tests-e2e.env.DUSK_DB_DUMP_DIR
          if [ -d jobs.tests-e2e.env.DUSK_DB_DUMP_DIR ]; then echo "DIR EXISTS jobs.tests-e2e.env.DUSK_DB_DUMP_DIR"; fi
          echo ${{ jobs.tests-e2e.env.DUSK_DB_DUMP_DIR }}
          if [ -d ${{ jobs.tests-e2e.env.DUSK_DB_DUMP_DIR }} ]; then echo "DIR EXISTS \$\{\{ jobs.tests-e2e.env.DUSK_DB_DUMP_DIR \}\}"; fi

      # retrieve cache
      - name: Cache Docker images
        id: docker-image-cache
        uses: actions/cache@v2
        with:
          path: .docker/images
          key: cache-docker-${{ hashFiles('.docker/*.dockerfile') }}-${{ hashFiles('.docker/docker-compose.yml') }}

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v2
        with:
          path: vendor
          key: cache-composer-${{ hashFiles('composer.lock') }}

      - name: Cache npm/Yarn packages
        id: yarn-cache
        uses: actions/cache@v2
        with:
          path: node_modules
          key: cache-yarn-${{ hashFiles('yarn.lock') }}

      - name: Cache vue
        id: vue-cache
        uses: actions/cache@v2
        with:
          path: |
            public/vue
            public/mix-manifest.json
          key: ${{ runner.os }}-vue-${{ hashFiles('resources/js/*') }}-${{ hashFiles('resources/sass/*') }}

      # init application for testing
      - name: App Setup
        uses: ./.github/actions/app-init

      # end-2-end tests
      - name: e2e tests - demo
        run: .docker/cmd/artisan.sh dusk --group demo --stop-on-failure
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.sha }}-e2e-demo
          path: |
            $DUSK_SCREENSHOT_DIR*
            $DUSK_DB_DUMP_DIR*
            storage/logs/*.log
          retention-days: 30

      - name: e2e tests - notifications
        run: .docker/cmd/artisan.sh dusk --group notifications-1 --stop-on-failure
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.sha }}-e2e-notifications
          path: |
            $DUSK_SCREENSHOT_DIR*
            $DUSK_DB_DUMP_DIR*
            storage/logs/*.log
          retention-days: 30

      - name: e2e tests - navigation
        run: |
          .docker/cmd/artisan.sh dusk --group navigation-1 --stop-on-failure
          .docker/cmd/artisan.sh dusk --group navigation-2 --stop-on-failure
          .docker/cmd/artisan.sh dusk --group navigation-3 --stop-on-failure
          .docker/cmd/artisan.sh dusk --group navigation-4 --stop-on-failure
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.sha }}-e2e-navigation
          path: |
            $DUSK_SCREENSHOT_DIR*
            $DUSK_DB_DUMP_DIR*
            storage/logs/*.log
          retention-days: 30

      - name: e2e tests - entry-modal
        run: |
          .docker/cmd/artisan.sh dusk --group entry-modal-1 --stop-on-failure
          .docker/cmd/artisan.sh dusk --group entry-modal-2 --stop-on-failure
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.sha }}-e2e-entry-modal
          path: |
            $DUSK_SCREENSHOT_DIR*
            $DUSK_DB_DUMP_DIR*
            storage/logs/*.log
          retention-days: 30

      - name: e2e tests - transfer-modal
        run: |
          .docker/cmd/artisan.sh dusk --group transfer-modal-1 --stop-on-failure
          .docker/cmd/artisan.sh dusk --group transfer-modal-2 --stop-on-failure
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.sha }}-e2e-transfer-modal
          path: |
            $DUSK_SCREENSHOT_DIR*
            $DUSK_DB_DUMP_DIR*
            storage/logs/*.log
          retention-days: 30

      - name: e2e tests - stats
        run: |
          .docker/cmd/artisan.sh dusk --group stats-summary --stop-on-failure
          .docker/cmd/artisan.sh dusk --group stats-trending --stop-on-failure
          .docker/cmd/artisan.sh dusk --group stats-distribution-1 --stop-on-failure
          .docker/cmd/artisan.sh dusk --group stats-distribution-2 --stop-on-failure
          .docker/cmd/artisan.sh dusk --group stats-tags-1 --stop-on-failure
          .docker/cmd/artisan.sh dusk --group stats-tags-2 --stop-on-failure
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.sha }}-e2e-stats
          path: |
            $DUSK_SCREENSHOT_DIR*
            $DUSK_DB_DUMP_DIR*
            storage/logs/*.log
          retention-days: 30

  notification:
    runs-on: ubuntu-latest
    needs:  # make sure the notification is sent AFTER the jobs you want included have completed
      - build
      - tests-unit
      - tests-e2e
    if: ${{ always() }} # You always want to be notified: success, failure, or cancelled
    steps:
      - name: discord
        uses: nobrayner/discord-webhook@v1
        with:
          github-token: ${{ github.token }}
          discord-webhook: ${{ secrets.DISCORD_WEBHOOK }}
