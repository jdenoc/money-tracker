# .github/actions/app-init/action.yml
name: App Init
description: Initialise app for use
inputs:
  docker-image-directory:
    description: "Directory docker image(s) were cached/saved"
    required: true
  is-cacheless:
    description: "Set to true to clear cache and create an alternative .env file"
    required: false
    default: 'false'
runs:
  using: composite
  steps:
    - name: re-load docker images
      run: |
        for image_name in $(ls ${{ inputs.docker-image-directory }}/*.tar.gz)
        do
          docker load -i $image_name
        done
        docker image ls "$(basename $PWD)*"
      shell: bash

    - name: set initial user:group ownership
      run: |
        docker-compose \
          run --rm -T --no-deps --user root \
          application \
          chown -R www-data:www-data .
      shell: bash

    - name: create laravel logs
      run: |
        docker-compose \
          run --rm -T --no-deps --user www-data \
          application \
          touch /var/log/php/laravel.log
        
        docker-compose \
          run --rm -T --no-deps --user www-data \
          application \
          ln -s /var/log/php/laravel.log storage/logs/laravel.log
      shell: bash

    - name: start containers
      run: |
        # start containers
        docker-compose up -d --force-recreate
        
        # wait until health status determined
        i=0
        while [[
          $(docker container ls --filter "status=running" -q) != $(docker container ls --filter "status=running" --filter "health=healthy" -q)
          &&
          $(docker container ls --filter "status=running" --filter "health=unhealthy" -q | wc -l) -eq 0
        ]]; do
          sleep 1
          i=$((i+1))
          if [[ $(($i % 10)) -eq 0 ]]; then
            echo "$(docker container ls --filter "status=running" --filter "health=healthy" -q | wc -l) healthy container(s)"
          fi
        done
        
        # check if any containers are unhealthy
        unhealthy_count=$(docker container ls --filter "status=running" --filter "health=unhealthy" -q | wc -l)
        if [[ $unhealthy_count -eq 0 ]]; then
          echo "it took $i seconds for containers to become healthy"
          docker container ls --size --no-trunc
        else
          echo "Failing due to $unhealthy_count containers"
          docker inspect --format "{{json .State.Health}}" $(docker container ls --filter "status=running" --filter "health=unhealthy" -q)
          # force a failure due to unhealthy containers
          exit 1;
        fi
      shell: bash

    - name: ensure correct user:group ownership for other containers
      run: |
        docker-compose exec -T --user root database chgrp root /var/log/mysql
        docker-compose exec -T --user root selenium chgrp seluser /home/seluser/Downloads
        docker-compose exec -T --user root selenium chmod g+w /home/seluser/Downloads
      shell: bash

    - name: general application setup
      run: |
        .docker/cmd/artisan.sh optimize:clear
        .docker/cmd/artisan.sh key:generate
        .docker/cmd/artisan.sh app:version $(git describe --always)
        .docker/cmd/artisan.sh optimize
        .docker/cmd/artisan.sh view:cache
      shell: bash

    - if: ${{ inputs.is-cacheless != 'false' }}
      name: clear cache and create alternative .env file
      run: |
        .docker/cmd/artisan.sh config:clear
        docker-compose exec -T --user www-data application cp .env.docker .env.testing
      shell: bash
